{"ast":null,"code":"var _jsxFileName = \"/Users/chiranjeevthomas/Documents/GitHub/fullstackopen2020/part9/patientor/src/components/PatientDetails/index.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport AltRouteIcon from '@mui/icons-material/AltRoute';\nimport FemaleIcon from '@mui/icons-material/Female';\nimport MaleIcon from '@mui/icons-material/Male';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport diagnostics from '../../services/diagnosis';\nimport patients from '../../services/patients';\nimport { Gender } from '../../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PatientDetails = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [patient, setPatient] = useState();\n  useEffect(() => {\n    patients.get(id).then(patient => setPatient(patient)).catch(err => {\n      console.error(err.message);\n    });\n    diagnostics.getDiagnosis().then(d => setDiagnosis(d)).catch(err => {\n      console.error(err.message);\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: patient ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [patient.name, '         ', patient.gender === Gender.Male ? /*#__PURE__*/_jsxDEV(MaleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 10\n        }, this) : patient.gender === Gender.Female ? /*#__PURE__*/_jsxDEV(FemaleIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 53\n        }, this) : /*#__PURE__*/_jsxDEV(AltRouteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 67\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"ssh: \", patient.ssn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"occupation: \", patient.occupation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Entries :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: patient.entries.map(entry => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [getCommonEntry(entry), getEntry(entry)]\n        }, entry.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this) : \"\"\n  }, void 0, false);\n};\n_s(PatientDetails, \"0Bv2Z5Es4VVDQmtDW9LOWRHKUTw=\", false, function () {\n  return [useParams];\n});\n_c = PatientDetails;\nconst GetCommonEntry = entry => {\n  _s2();\n  var _entry$diagnosisCodes;\n  const [diagnosis, setDiagnosis] = useState();\n  useEffect(() => {});\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Date:\", entry.date]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Description:\", entry.description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 3\n    }, this), entry.diagnosisCodes ? /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Codes:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: entry === null || entry === void 0 ? void 0 : (_entry$diagnosisCodes = entry.diagnosisCodes) === null || _entry$diagnosisCodes === void 0 ? void 0 : _entry$diagnosisCodes.map(code => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [code, \":\", diagnosis[code]]\n        }, code, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 74\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Specialist:\", entry.specialist]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Type:\", entry.type]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n};\n_s2(GetCommonEntry, \"fFUK768+6U2rvJLHncYzYa4Wu5Y=\");\n_c2 = GetCommonEntry;\nconst getEntry = entry => {\n  var _entry$sickLeave, _entry$sickLeave2;\n  const assertNever = data => {\n    throw Error(\"This should never be called\" + data);\n  };\n  switch (entry.type) {\n    case 'HealthCheck':\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: entry.healthCheckRating\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 10\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 14\n      }, this);\n    case 'Hospital':\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Date:\", entry.discharge.date]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Criteria:\", entry.discharge.criteria]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 14\n      }, this);\n    case 'OccupationalHealthcare':\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Start Date:\", (_entry$sickLeave = entry.sickLeave) === null || _entry$sickLeave === void 0 ? void 0 : _entry$sickLeave.startDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"End Date:\", (_entry$sickLeave2 = entry.sickLeave) === null || _entry$sickLeave2 === void 0 ? void 0 : _entry$sickLeave2.endDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 14\n      }, this);\n    default:\n      return assertNever(entry);\n  }\n};\nexport default PatientDetails;\nvar _c, _c2;\n$RefreshReg$(_c, \"PatientDetails\");\n$RefreshReg$(_c2, \"GetCommonEntry\");","map":{"version":3,"names":["AltRouteIcon","FemaleIcon","MaleIcon","React","useEffect","useState","useParams","diagnostics","patients","Gender","PatientDetails","id","patient","setPatient","get","then","catch","err","console","error","message","getDiagnosis","d","setDiagnosis","name","gender","Male","Female","ssn","occupation","entries","map","entry","getCommonEntry","getEntry","GetCommonEntry","diagnosis","date","description","diagnosisCodes","code","specialist","type","assertNever","data","Error","healthCheckRating","discharge","criteria","sickLeave","startDate","endDate"],"sources":["/Users/chiranjeevthomas/Documents/GitHub/fullstackopen2020/part9/patientor/src/components/PatientDetails/index.tsx"],"sourcesContent":["import AltRouteIcon from '@mui/icons-material/AltRoute';\nimport FemaleIcon from '@mui/icons-material/Female';\nimport MaleIcon from '@mui/icons-material/Male';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport diagnostics from '../../services/diagnosis';\nimport patients from '../../services/patients';\n\nimport { Diagnosis, Entry, Gender, Patient } from '../../types';\n\nconst PatientDetails = () => {\n   \n  const {id} = useParams() \n\n  const [patient,setPatient]=useState<Patient>()\n  \n  \n useEffect(()=>{\n     \n    patients.get(id)\n    .then(patient => setPatient(patient))\n    .catch(err =>{\n         \n      console.error(err.message);\n    })\n\n    diagnostics.getDiagnosis()\n      .then(d => setDiagnosis(d))\n      .catch(err =>{\n        console.error(err.message)\n      })\n  \n },[id])\n\n\n  return (\n    <>\n    {patient?\n    <div>\n        <h2>{patient.name}{'         '}{patient.gender===Gender.Male\n        ?<MaleIcon/>:patient.gender===Gender.Female?<FemaleIcon/>:<AltRouteIcon/>}</h2>\n        <h3>ssh: {patient.ssn}</h3>\n        <h3>occupation: {patient.occupation}</h3>\n        \n        <h2>Entries :</h2>\n        <ul>\n        {\n          patient.entries.map(entry =>\n                  <li key={entry.id}>\n                    {getCommonEntry(entry)}\n                    {getEntry(entry)}\n                    </li>)\n        }\n        </ul>\n     \n     </div>:\"\"\n    }\n    </>\n  )\n}\n\nconst GetCommonEntry=(entry:Entry) :JSX.Element=> {\n const [diagnosis,setDiagnosis] = useState<Diagnosis[]>()\n\n useEffect(()=>{\n\n  })\n  \n\n  return(<>\n  <h4>Date:{entry.date}</h4> \n  <h4>Description:{entry.description}</h4>\n  {entry.diagnosisCodes?<h4>Codes:<ul>{entry?.diagnosisCodes?.map(code =><li key={code}>{code}:{diagnosis[code]}</li>)}</ul></h4>:\"\"}\n  <h4>Specialist:{entry.specialist}</h4>\n  <h4>Type:{entry.type}</h4>\n  </>)\n  \n}\n\nconst getEntry=(entry:Entry):JSX.Element=>{\n    \n  const assertNever = (data:unknown):never =>{\n     \n     throw Error(\"This should never be called\"+data)\n  }\n  \n  switch(entry.type){\n     \n    case 'HealthCheck':\n      return <div>\n        {<h4>{entry.healthCheckRating}</h4>}\n      </div>\n    case 'Hospital':\n      return <div>\n        {<h4>Date:{entry.discharge.date}</h4>}\n        {<h4>Criteria:{entry.discharge.criteria}</h4>}\n        </div>\n    case 'OccupationalHealthcare':\n      return <div>\n         {<h4>Start Date:{entry.sickLeave?.startDate}</h4>}\n        {<h4>End Date:{entry.sickLeave?.endDate}</h4>}\n      </div>\n    default:\n      return assertNever(entry)\n\n  }\n  \n}\n\nexport default PatientDetails"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}