{"ast":null,"code":"export let Gender;\n(function (Gender) {\n  Gender[\"Male\"] = \"male\";\n  Gender[\"Female\"] = \"female\";\n  Gender[\"Other\"] = \"other\";\n})(Gender || (Gender = {}));\nexport let HealthCheckRating;\n(function (HealthCheckRating) {\n  HealthCheckRating[HealthCheckRating[\"Healthy\"] = 0] = \"Healthy\";\n  HealthCheckRating[HealthCheckRating[\"LowRisk\"] = 1] = \"LowRisk\";\n  HealthCheckRating[HealthCheckRating[\"HighRisk\"] = 2] = \"HighRisk\";\n  HealthCheckRating[HealthCheckRating[\"CriticalRisk\"] = 3] = \"CriticalRisk\";\n})(HealthCheckRating || (HealthCheckRating = {}));\nexport let EntryType;\n\n// Define special omit for unions\n(function (EntryType) {\n  EntryType[\"HealthCheckEntry\"] = \"HealthCheck\";\n})(EntryType || (EntryType = {}));","map":{"version":3,"names":["Gender","HealthCheckRating","EntryType"],"sources":["/Users/chiranjeevthomas/Documents/GitHub/fullstackopen2020/part9/patientor/src/types.ts"],"sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum Gender {\n  Male = \"male\",\n  Female = \"female\",\n  Other = \"other\"\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries:Entry[]\n}\n\ninterface BaseEntry{\n    id:string,\n    description: string;\n    date: string;\n    specialist:string;\n    diagnosisCodes?: Array<Diagnosis['code']>\n\n}\n\nexport enum HealthCheckRating{\n  \"Healthy\"=0,\n  \"LowRisk\"=1,\n  \"HighRisk\" = 2,\n  \"CriticalRisk\" = 3\n}\n\n\n interface HealthCheckEntry extends BaseEntry{\n   type: 'HealthCheck';\n   healthCheckRating: HealthCheckRating\n}\n\n interface OccupationalHealthcareEntry extends BaseEntry{\n   type:\"OccupationalHealthcare\";\n   employerName:string;\n   sickLeave?: {\n    \"startDate\":string,\n    \"endDate\":string\n   }\n\n}\n interface HospitalEntry extends BaseEntry{\n  type:\"Hospital\";\n  discharge:{\n    \"date\":string,\n    \"criteria\":string\n  }\n}\n\nexport type Entry = HealthCheckEntry|OccupationalHealthcareEntry|HospitalEntry;\n\nexport enum EntryType {\n   HealthCheckEntry=\"HealthCheck\"\n}\n\n// Define special omit for unions\ntype UnionOmit<T, K extends string | number | symbol> = T extends unknown ? Omit<T, K> : never;\n// Define Entry without the 'id' property\n\nexport type NonSensitiveEntries =UnionOmit<Entry, 'id'>;\n\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;"],"mappings":"AAMA,WAAYA,MAAM;AAIjB,WAJWA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;AAAA,GAANA,MAAM,KAANA,MAAM;AAyBlB,WAAYC,iBAAiB;AAK5B,WALWA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;AAAA,GAAjBA,iBAAiB,KAAjBA,iBAAiB;AAgC7B,WAAYC,SAAS;;AAIrB;AAAA,WAJYA,SAAS;EAATA,SAAS;AAAA,GAATA,SAAS,KAATA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}